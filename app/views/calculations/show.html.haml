- meta title: @calculation.name || t('calculations.show.title', name: @calculation.quantity.name)

- replace :back do
    = link_to (current_user ? calculations_url : app_root_url), data: { turbolinks_animate_appear: 'fadein' } do
        %i.nc-icon.nc-tail-left
- replace :tools do
    - unless @calculation.result.undefined
        = link_to 'javascript:void(0)', class: 'clipboard', data: { clipboard_text: @calculation.result.value.to_s } do
            %i.nc-icon.nc-ungroup
    = link_to 'javascript:void(0)', class: 'modalist--trigger' do
        %i.nc-icon.nc-share-26
    - if can?(:destroy, @calculation)
        = link_to calculation_url(@calculation), method: :delete, data: { confirm: t('calculations.show.delete.confirm') } do
            %i.nc-icon.nc-trash
- replace :title do
    - if @calculation.result.undefined
        %h1.color--error= t('calculations.show.no_solution_found')
    - else
        %h1.sym.clipboard{ data: { clipboard_text: @calculation.result.value.to_s } }
            = @calculation.result.pretty_value
            %span= @calculation.unit_of_measurement.sym
- replace :subtitle do
    %p
        %span= link_to @calculation.quantity.name, @calculation.quantity, class: 'hyperlink--inherit', data: { turbolinks_animate_animation: 'fadeout' }
        Â·
        %span= time_ago_in_words @calculation.created_at

- if !current_user && notice
    - replace :section do
        = component 'suggestion', title: t('calculations.show.suggestion.title'), content: t('calculations.show.suggestion.content') do
            = link_to t('d.signup'), new_user_registration_url, class: 'myg-button'
            = link_to t('d.signin'), new_user_session_url, class: 'myg-button myg-button--secondary'

%h2= @calculation.name if @calculation.name
%p= @calculation.description if @calculation.description
- if can? :update, @calculation
    %p= link_to t('calculations.show.edit'), edit_calculation_url(@calculation), class: 'modalist--trigger hyperlink--inherit'

%hr

- if @calculation.result.undefined && @calculation.dependencies.any?
    %h2= t('calculations.show.missing_dependencies.title')
    %p= t('calculations.show.missing_dependencies.content')
    .myg-grid.myg-wrap--phone
    .myg-list.myg-list--contained
        - @dependencies.each do |equation|
            .myg-list--item
                = link_to measurements_url(quantity: params[:quantity], unit: params[:unit], equation: equation.id) do
                    %p= equation.quantities.map { |q| q.name }.join(', ')
                    - if equation.conditions&.any?
                        %p.sm= t('calculations.show.missing_dependencies.conditions')
                        - equation.conditions.each do |condition|
                            %p.sm= condition

- if can?(:update, @calculation) && !@calculation.result.undefined
    %h2= t('calculations.show.unit_conversion')
    = simple_form_for @calculation, authenticity_token: true do |f|
        = component 'myg/form-field', as: :input, attribute: :unit_of_measurement_id, class_name: 'calculation', input_html: { required: true, placeholder: 'Choose a unit', class: 'select flexdatalist', data: { data: "/app/quantities/#{@calculation.quantity.id.to_s}/units_of_measurement.json?locale=#{I18n.locale.to_s}", search_in: ['sym', 'name'], text_property: 'sym', visible_properties: ['sym', 'name'], selection_required: 'true', value_property: 'id', min_length: '0' } }

%h2= t('d.measurements')
.myg-grid.myg-wrap--phone
    - @measurements.each do |measurement|
        = render 'calculations/measurements/measurement', measurement: measurement, animation: 'fadeout'

- if @constants.any?
    %h2= t('d.constants')
    .myg-grid.myg-wrap--phone
        - @constants.each do |constant|
            = render constant, animation: 'fadeout'

- if @conditions.any?
    %h2= t('d.conditions')
    .myg-list.myg-list--contained
        - @conditions.each do |condition|
            .myg-list--item
                %p= condition

- if @equations.any?
    %h2= t('d.equations')
    .myg-grid.myg-wrap--phone
        - @equations.each do |equation|
            = render equation, animation: 'fadeout'

%h2= t('d.unit')
.myg-grid.myg-wrap--phone
    = render @calculation.unit_of_measurement, animation: 'fadeout'








-# - append :modals do
-#     .modal.share
-#         .modal-content-wrapper
-#             %h3= t 'd.share'
-#             .wrapper
-#                 = link_to 'Twitter', "https://twitter.com/home?status=I%20created%20a%20new%20calculation%20with%20%40phylator.%20Take%20a%20look!%20#{request.original_url}", target: '_blank'
-#                 = link_to 'WhatsApp', "whatsapp://send?text=#{request.original_url}", target: '_blank'
-#                 = link_to 'Facebook', "https://www.facebook.com/sharer/sharer.php?u=#{request.original_url}", target: '_blank'
-#                 = link_to t('d.email'), "mailto:?&subject=My%20new%20calculation&body=Take%20a%20look!%20#{request.original_url}", target: '_blank'
-#
-#     .modal.signup
-#         .modal-content-wrapper
-#             %h3= t 'calculations.show.save.title'
-#             %p= t 'calculations.show.save.content'
-#             .flex-wrapper
-#                 = link_to t('d.signup'), new_user_registration_url(calculation: @calculation.id), class: 'btn'
-#                 = link_to t('d.signin'), new_user_session_url(calculation: @calculation.id), class: 'btn secondary'
-#
-#     .modal.edit
-#         .modal-content-wrapper
-#             = simple_form_for @calculation, remote: true do |f|
-#                 = f.input :name, label: t('d.title')
-#                 = f.input :description, label: t('d.description')
-#                 .flex-wrapper
-#                     = f.button :submit, t('d.save'), onclick: 'componentsModalClose(".modal.edit");'
-#
-#     .modal.delete
-#         .modal-content-wrapper
-#             = link_to t('d.delete') + '?', @calculation, method: :delete, remote: true, class: 'btn warn'



-# - if !current_user && notice
-#     - append :head do
-#         %script{ type: 'text/javascript' }
-#             $(document).on( 'turbolinks:load', function() { componentsModalOpen('.modal.signup'); });
